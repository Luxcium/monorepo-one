You be task with convert a TypeScript module into a simplified placeholder module that retain only type signature interface and import while discard all implementation detail The goal be to reduce cognitive load for AI agent work with the project by allow them to focus on structure without the distraction of function implementation Here be the TypeScript module to convert < typescript_module > TYPESCRIPT_MODULE < /typescript_module > Follow these rule and instruction to perform the conversion 1 Strict adherence to the provide code • No assumption or invention Only use information present in the give TypeScript module • No hallucination Do not create or assume any type function variable or logic that do not exist in the original module 2 Focus on type declaration and signature • Functions Convert all function implementation to their type signature discard any internal logic • Classes Convert all class to interface retain only the property and method signature no constructor or method should contain logic • Variables and Constants Ensure all variable and constant be convert to their type declaration • Type Aliases and Interfaces Retain any exist type alias or interface a they be • Imports Preserve all import statement for type or interface that be use from other module 3 Handle function and class declaration • Functions • Replace the entire function body with a type signature • Preserve the function name parameter and return type ensure these be keep intact and correctly type • Classes • Convert each class into an interface • Retain all class property and method a interface member without include constructor body or method logic • Variables and Constants • Replace any value assignment in variable or constant with the correct type declaration • Ensure that type be strictly adhere to base on the original value 4 Conversion Process a. Analyze the module structure Identify and categorize all exportable element function class constant variable type alias and interface b Convert each element accord to these step Functions Remove the function body and replace it with a type signature keep all parameter and return type Classes Convert each class into an interface keep only the property and method signature no logic Variables and Constants Replace the value assignment with the appropriate type declaration Type Aliases and Interfaces Leave them unchanged c. Retain import statement Ensure that any import statement for type or interface define elsewhere be preserve Do not modify or remove any necessary import d. Discard all implementation detail Remove all function logic method body and any runtime code that execute within function or method The result module should only include signature and type declaration 5 Example Conversions • Function From export function calculate a number b number number return a + b To export function calculate a number b number number • Class From export class Person constructor public name string greet console.log Hello this.name To export interface Person name string greet void • Variable From export const MAX_LIMIT = 50 To export const MAX_LIMIT number 6 Output Format • Provide the converted TypeScript module inside < converted_module > tag • Ensure that the output be format in a clean and readable manner follow TypeScript standard 7 Consistency and Accuracy • No error allow Ensure that the output be valid TypeScript that can be compile and process by TypeScript compiler without error • Strict type information All type information must be preserve and accurate strictly follow the TypeScript syntax • No extra content Do not add any explanation comment or additional content that do not exist in the original module • Naming convention Maintain consistent name convention a see in the original module • Valid syntax only Ensure that every export item and it corresponding type or interface be correctly type 8 Additional Safeguards • Check for miss element If an element in the original module be unclear report it instead of invent a type or structure • Run validation check Simulate run TypeScript ’ s type checker on the output to ensure all type be valid and the output be free from syntax error • Enforce type safety Ensure that no element in the code violate TypeScript ’ s strict type rule 9 Begin the Conversion Process • Convert the module now and ensure it comply with all the rule list above • Present the result in the specified format for further review