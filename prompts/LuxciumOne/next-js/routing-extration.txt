You're absolutely right, I should have included the informational and formative parts of the content along with the normative directives. Let me revise the Next.js Routing and Server Actions reference to provide a more comprehensive and contextual overview:

# Next.js Routing and Server Actions Reference

## Introduction
Next.js is a React framework that provides a file-system based router for building full-stack web applications. It offers features like Server Components, Server-side Rendering, and Data Fetching to optimize the performance and developer experience.

## Routing Fundamentals
Next.js uses a file-system based router where folders define routes. Each folder represents a route segment that maps to a URL segment. Nested folders create nested routes. Special files like page.js, layout.js, and loading.js are used to create UI for each route segment.

MUST understand file-system based routing.
MUST use folders to define routes.
MUST create nested routes with nested folders.
MUST use page.js to make route segments publicly accessible.
MUST implement layout.js for shared UI across routes.
MUST use loading.js for loading states.
MUST handle errors with error.js boundaries.
MUST use not-found.js for 404 errors.
MUST implement route.js for API functionality.
SHOULD use template.js for re-rendering layouts.
SHOULD implement default.js as fallback for parallel routes.

## Dynamic Routing
Next.js supports dynamic routing using dynamic segments. These are defined by wrapping a folder name in square brackets, e.g., [folderName]. Catch-all and optional catch-all segments are also available using [...folderName] and [[...folderName]] respectively.

MUST use [folderName] for dynamic segments.
MUST implement [...folderName] for catch-all segments.
SHOULD use [[...folderName]] for optional catch-all segments.
MUST access dynamic params via props.params.
SHOULD use generateStaticParams for static generation of dynamic routes.

## Advanced Routing Patterns
Next.js provides advanced routing patterns like Parallel Routes and Intercepting Routes. Parallel Routes allow you to simultaneously render multiple pages within the same layout, while Intercepting Routes let you load a route from another part of the application within the current layout.

SHOULD implement parallel routes using @folder convention.
SHOULD use intercepting routes for modal-like experiences.
MUST use (folderName) for route groups without affecting URL structure.
SHOULD leverage route groups for organizational purposes.

## Navigation
Next.js offers several ways to navigate between routes, including the <Link> component for client-side navigation, the useRouter hook for programmatic navigation, and the redirect function for server-side redirects.

MUST use <Link> component for client-side navigation.
MUST implement useRouter hook for programmatic navigation.
MUST use redirect function for server-side redirects.
SHOULD understand soft navigation for preserving state.
MUST handle back/forward navigation appropriately.

## Rendering
Next.js supports both Server Components and Client Components. Server Components are the default in the app directory and are optimized for performance, while Client Components are marked with the 'use client' directive.

MUST differentiate between Server and Client Components.
MUST use 'use client' directive to mark Client Components.
MUST understand static and dynamic rendering.
SHOULD implement streaming for improved loading performance.
MUST utilize partial rendering for route segments.

## Data Fetching
Server Components are responsible for initial data fetching, which is automatically cached and optimized by Next.js. Incremental Static Regeneration can be used to update dynamic content, and the cookies() and headers() APIs provide access to dynamic data.

MUST use Server Components for initial data fetching.
MUST understand caching behavior of fetch requests.
SHOULD implement incremental static regeneration for dynamic content.
MUST use cookies() and headers() for dynamic data access.
SHOULD implement parallel data fetching where possible.

## Metadata and SEO
Next.js provides the Metadata API for managing <head> elements like title and meta tags. Metadata can be defined statically or dynamically using the generateMetadata function.

MUST use Metadata API for managing <head> content.
MUST implement generateMetadata for dynamic metadata.
SHOULD use opengraph-image and other built-in metadata files.

## Internationalization
Next.js supports internationalization through language routing and middleware. You can use dynamic segments to handle different locales and middleware to detect the user's preferred language.

SHOULD implement language routing with dynamic segments.
MUST use middleware for language detection and redirection.
SHOULD implement static generation for multi-language content.

## Middleware
Middleware allows you to run code before a request is completed. It can be used for tasks like authentication, server-side redirects, and path rewriting.

MUST use middleware.ts in root for custom request handling.
SHOULD use matcher config for specific middleware execution paths.
MUST implement custom routing logic in middleware when needed.

## Server Actions
Server Actions are asynchronous functions that can be executed on the server. They are marked with the 'use server' directive and can be used for form submissions, data mutations, and other server-side tasks.

MUST use 'use server' directive to define Server Actions.
MUST implement Server Actions for form submissions and data mutations.
SHOULD use Server Actions in both Server and Client Components.
MUST handle errors appropriately in Server Actions.
SHOULD implement optimistic updates with useOptimistic hook.
MUST revalidate cache after mutations with revalidatePath or revalidateTag.
SHOULD use cookies API for managing cookies in Server Actions.

## Security in Server Actions
When working with Server Actions, it's crucial to implement proper security measures to prevent vulnerabilities like CSRF and data exposure.

MUST implement proper authentication and authorization.
MUST validate and sanitize all inputs in Server Actions.
SHOULD use React taint APIs to prevent sensitive data exposure.
MUST understand and implement CSRF protection measures.
SHOULD use environment variables for sensitive information.

## TypeScript Integration
Next.js provides excellent TypeScript support, including improved type checking, custom TypeScript plugin, and type definitions for route parameters and search params.

SHOULD use TypeScript for improved type checking and developer experience.
MUST define types for route parameters and search params.
SHOULD leverage TypeScript plugin for Next.js specific types.

## Performance Optimization
Next.js includes several performance optimization features, such as automatic code splitting, prefetching, caching, and image optimization.

MUST leverage automatic code splitting.
MUST implement prefetching for faster navigation.
MUST utilize Router Cache for reducing data transfer.
SHOULD use Image Optimization for better Core Web Vitals.
MUST understand and utilize Edge Runtime when applicable.

## Error Handling
Next.js provides error handling mechanisms, including error boundaries with error.js and global error handling with global-error.js.

MUST implement error boundaries using error.js.
SHOULD use global-error.js for root layout errors.
MUST handle and display form errors appropriately.
SHOULD implement graceful error recovery mechanisms.

## Project Organization
The app directory in Next.js allows for safe colocation of project files, and Next.js supports features like private folders and module path aliases to improve organization and maintainability.

MUST understand safe colocation of files in app directory.
SHOULD use private folders (_folderName) for internal implementation.
SHOULD consider using src directory for application code.
SHOULD utilize module path aliases for improved imports.

## Deployment and Environment
When deploying a Next.js application, it's important to configure the build output for optimal performance and manage environment variables securely.

MUST configure build output for optimal performance.
SHOULD understand different deployment options (Vercel, self-hosting).
MUST manage environment variables securely.
SHOULD implement proper error logging and monitoring.

This comprehensive reference covers the key aspects of Next.js routing and Server Actions, providing both informational and normative content to ensure a thorough understanding for a Vector-Based LLM system. The combination of contextual details and imperative directives should equip the system with the necessary knowledge to effectively work with Next.js routing and server-side functionality.
