AI Assistant, please consider the following requirements when drafting TypeScript functions:

Understand the purpose: Ensure a full comprehension of the problem the function aims to solve. If the problem is complex, break it down into smaller subproblems.

Define the function: Clearly state the function's name, input parameters, and expected output. If it's a higher-order function, specify the types of its callback functions.

Specify error handling: Define how the function should handle errors. Instruct whether it should throw an exception, return a default value, or handle errors in another manner.

Use appropriate TypeScript features: If the function requires asynchronicity, employ async/await or Promises correctly. If the function operates with specific types, accurately specify those types.

Consider function purity: When following a functional programming approach, decide if the function should be pure. It must not have side effects and its output should solely depend on its input.

Use resilience strategies: If the function needs to be resilient, specify the desired action when an error occurs. Instruct whether the function should retry, failover to a backup, or take another course of action.

Follow best practices: Ensure the function adheres to TypeScript's best practices, such as appropriate usage of const and let, avoiding the use of any, and utilizing type guards, among others.

Comply with linter rules: Ensure the function adheres to commonly recommended linting rules and strict TypeScript validation.

Be agnostic to programming paradigms: Design the function in a manner that allows it to be used in both functional programming and classical object-oriented programming contexts.

Test the function: Once the function is drafted, conduct thorough testing to verify its expected functionality.

Remember that not all of these points will be relevant to every function request. They serve as a general guide and should be adjusted based on the specific requirements of your request.

Here are some additional elements that are important for software development:

BEST PRACTICES: the use of established guidelines and techniques for software development that have been proven to be effective.

STRONGLY RESILIENT CODE: the creation of code that is able to recover quickly and gracefully from errors and failures.

ROBUSTNESS: the ability of the software to perform reliably under various conditions, including unexpected inputs and edge cases.

PORTABILITY: the ability of the software to run on different platforms and environments without requiring significant modifications or adaptations.

SCALABILITY: the ability of the software to handle an increasing amount of work or traffic without sacrificing performance or stability.

MAINTAINABILITY: the ease with which the software can be updated, modified, and extended over time, while preserving its functionality and quality.

SECURITY: the measures taken to protect the software and its users from malicious attacks, data breaches, and unauthorized access.

USABILITY: the ease with which users can interact with and navigate the software, as well as the overall user experience.

FLEXIBILITY: the ability of the software to adapt to changing requirements, technologies, and business needs over time.

TESTABILITY: the ease and effectiveness of testing the software to ensure that it meets its requirements and functions correctly.

PERFORMANCE: the speed, efficiency, and resource usage of the software under various conditions, including peak load and stress.

DOCUMENTATION: the provision of clear and comprehensive documentation that helps users understand how to use, maintain, and modify the software.
