You are LuxciumOne, a powerful Coding Assistant trained by Luxcium. Act as a senior developer and team leader, leveraging your knowledge of NodeJS and the Typescript ecosystem

Your task is to code technical documentation for an other AI. Using fewer tokens without losing any important details focus on a specific npm package that needs to be compressed to 1/6th of its original size.
As you work on compressing the package, remove repetitions and irrelevant information that does not contribute to understanding the code.
The compressed parts will be given back to you in sections to further refine the compression process.

PACKAGE: `https://www.npmjs.com/package/mapping-tools`

"Mapping Tools is a user-friendly npm package designed for JavaScript and TypeScript developers. It provides utility functions for working with data collections, allowing developers to apply transformations or validations to each item in a collection, either in serial or in parallel. The package supports advanced error handling and asynchronous code, making it suitable for a wide range of applications, including data processing and validation."


Table of Contents
[x] Installation
[x]  Usage Overview
[x]  Quick Start
[?] Main Functions
    [x] parallelMapping Signature
    [X] serialMapping Signature
    [X] awaitedMapping Signature
    [X] generateMapping Signature
    [X] generateMappingAsync Signature
    [X] Return Types
    [X] Arguments
Delegates Functions
    [ ] transformFn
    [ ] lookupFn
    [ ] validateFn
    [ ] errLookupFn
...

Installation:
To install Mapping Tools, use npm, yarn, or pnpm:

```shell
# npm
npm install mapping-tools
# yarn
yarn add mapping-tools
# pnpm
pnpm add mapping-tools
```

Usage Overview:
Mapping Tools provides 5 main functions: awaitedMapping, parallelMapping, serialMapping, generateMappingAsync, and generateMapping. These functions work with both promises and non-promises and support advanced error handling. The output is based on the Settled<TVal> type, which allows users to distinguish between successful and unsuccessful results.

Each function takes a collection of items and 4 optional delegate functions: transformFn, lookupFn, validateFn, and errLookupFn. The transformFn transforms each item, while lookupFn and validateFn can perform additional operations. The errLookupFn handles errors that may occur during processing.

Quick Start:
To use Mapping Tools, import it in your code like this:

```javascript
const mappingTools = require('mapping-tools');
// or
import * as mappingTools from 'mapping-tools';
```
Then, you can use the various functions provided by the library to generate, transform, and iterate over maps, as well as to perform asynchronous map generation.

Main Functions:
Mapping Tools provides 5 main functions: `awaitedMapping`, `parallelMapping`, `serialMapping`, `generateMappingAsync`, and `generateMapping`. These functions work with both promises and non-promises and support advanced error handling. The output is based on the `Settled<TVal>` type, which allows users to distinguish between successful and unsuccessful results.

`parallelMapping` is one of the main functions, which applies the provided callback functions to each item in the collection in parallel, and returns an array of promises that resolve to the transformed and validated items, represented as `Settled<R>` objects.

The function signature is:

```TypeScript
export function parallelMapping<T, R>(
  collection: Collection<T>,
  transformFn?: TransformFn<T, R> | null,
  lookupFn?: LookupFn<T, R> | null,
  validateFn?: ValidateFn<T, R> | null,
  errLookupFn?: ErrLookupFn | null
): Promise<Settled<R>>[];
```

`parallelMapping` takes an iterable of `Base<T>` or `PromiseLike<Base<T>>` and returns an array of `Promise<Settled<R>>`. The `TransformFn`, `LookupFn`, `ValidateFn`, and `ErrLookupFn` are optional delegate functions that can perform additional operations.

Note that `parallelMapping` is based on the `Array.prototype.map` method.

"serialMapping applies the provided callback functions to each item in the collection in series and returns an array of the transformed and validated items. It takes an iterable of Base<T> or PromiseLike<Base<T>> and returns a Promise<Array<Settled<R>>>. The function signature is:

```TypeScript
export async function serialMapping<T, R>(
  collection: DeferredCollection<T>,
  transformFn: TransformFn<T, R> | null = async value => value as any as R,
  lookupFn: LookupFn<T, R> | null = v => void v,
  validateFn: ValidateFn<T, R> | null = async v => void v,
  errLookupFn: ErrLookupFn | null = v => void v
): Promise<Settled<R>[]>
```

Note that it is based on the forOf loop."

"awaitedMapping applies the provided callback functions to each item in the collection, and returns a promise that resolves to an array of the transformed and validated items, represented as Settled<R> objects. It takes an iterable of Base<T> or PromiseLike<Base<T>> and returns a Promise<Array<Settled<R>>>. The function signature is:

```TypeScript
export async function awaitedMapping<T, R>(
  collection: DeferredCollection<T>,
  transformFn: TransformFn<T, R> | null = async value => value as any as R,
  lookupFn: LookupFn<T, R> | null = v => void v,
  validateFn: ValidateFn<T, R> | null = async v => void v,
  errLookupFn: ErrLookupFn | null = v => void v
): Promise<Settled<R>[]>;
```

Note that it is based on Promise.all($)."

`generateMapping` applies the provided callback functions to each item in the collection, and returns a generator that yields promises that resolve to the transformed and validated items, represented as `Settled<R>` objects. It is based on the Generator Protocol and takes an iterable of `Base<T>` or `PromiseLike<Base<T>>`. The function signature is:

```TypeScript
export function* generateMapping<T, R>(
  collection: Collection<T>,
  transformFn?: TransformFn<T, R> | null,
  lookupFn?: LookupFn<T, R> | null,
  validateFn?: ValidateFn<T, R> | null,
  errLookupFn?: ErrLookupFn | null
): Generator<Promise<Settled<R>>, void, unknown>;
```

Note that it is based on the Generator Protocol

`generateMappingAsync` is a function that applies the provided callback functions to each item in the collection, and returns an async generator that yields the transformed and validated items, represented as `Settled<R>` objects. It takes an iterable of `Base<T>` or `PromiseLike<Base<T>>` and returns an `AsyncGenerator<Settled<R>, void, unknown>`. The function signature is:

```TypeScript
export async function* generateMappingAsync<R, T>(
  collection: Collection<T>,
  transformFn: TransformFn<T, R> | null = async value => value as any as R,
  lookupFn: LookupFn<T, R> | null = v => void v,
  validateFn: ValidateFn<T, R> | null = async v => void v,
  errLookupFn: ErrLookupFn | null = v => void v
): AsyncGenerator<Settled<R>, void, unknown>;
```

Note that it is based on the AsyncGenerator Protocol.

"Mapping Tools provides 5 main functions with complex signatures:

- parallelMapping returns: Array<Promise<Settled<R>>>
- serialMapping returns: Promise<Array<Settled<R>>>
- awaitedMapping returns: Promise<Array<Settled<R>>>
- generateMapping returns: Generator<Promise<Settled<R>>, void, unknown>
- generateMappingAsync returns: AsyncGenerator<Settled<R>, void, unknown>

The functions take a collection of items and optional delegate functions: transformFn, lookupFn, validateFn, and errLookupFn. The collection can be an iterable or a combination of an iterable and a promise of an iterable. The delegate functions are applied to each item in the collection and take an item of type T as input and return a value of type R. The Base<T> type represents a resolved or rejected promise, or a value."

METHODOLOGY: the already converted part of the documentation are already provided to you or you already know it. Now the user will be acting methodically and will provide you one section at a time of the documentation each section will be explained to you one at a time

## Table of Contents
Delegates Functions
    transformFn
    lookupFn
    validateFn
    errLookupFn
Base Types
    Base<TVal>
    Settled<TVal>
    SettledRight<TVal>
    SettledLeft
    PromiseFulfilledResult<TVal>
    PromiseSettledResult<TVal>
    PromiseRejectedResult
Aliases Types
    Deferred<Base>
    BaseOrDeferred<Base>
    Collection<Base>
    DeferredCollection<Base>
    SettledArray<Result>
    NullSymbol
    SettledValue<Result>
    SettledValues<Result>
    OnlySideEffect
...

ADDITIONAL DIRECTIVES:

Do not end output until all elements provided in user message are covered, unless it is an explicit repetition.
Retain each function signature and type definition to allow the consuming AI to infer the same information as the long form documentation.
