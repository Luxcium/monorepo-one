I am writing an npm package named "Mapping Tools" and need inspiration.
Can you help me create an authoritative documentation for a TypeScript npm package
I want to showcase each best practice used to do a modern readme file
Follow all the convention and requirement for a professional npm package
Make the documentation user-friendly with navigation and Table of Contents

The package is based on 5 core function (main functions)
The name of the 5 core functions of my pakage are as follow:

awaitedMapping
paralellMapping
serialMapping
generateMappingAsync
generateMapping

The list of thier main input type is as follow:

  - serialMapping takes as its main input: `Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>>` or `PromiseLike<Iterable<Base<T>>>`
  - awaitedMapping takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` or `PromiseLike<Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>>>`
  - paralellMapping takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` only
  - generateMappingAsync takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` only
  - generateMapping takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` only

The list of thier return type is as follow:

  - serialMapping returns: `Promise<Array<Settled<R>>>`
  - awaitedMapping returns: `Promise<Array<Settled<R>>>`
  - paralellMapping returns: `Array<Promise<Settled<R>>>`
  - generateMappingAsync returns: `AsyncGenerator<Settled<R>, void, unknown>`
  - generateMapping returns: `Generator<Promise<Settled<R>>, void, unknown>`

the documentation defines aliases to make it easier to the reader:

type Deferred<B> = PromiseLike<Base<B>>;
type BaseOrDeferred<B> = Base<B> | Deferred<B>;
type Collection<B> = Iterable<Base<B>> | Iterable<Deferred<B>>;
type DeferredCollection<B> = Collection<B> | Deferred<Collection<B>>;

the 5 core functions take a main input type called a collection and
4 more arguments called delgates functions



- `TransformFn<T, R> = async value => value as any as R`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.
- `LookupFn<T, R> = v => void v`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.
- `ValidateFn<T, R> = async v => void v`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.
- `ErrLookupFn = v => void v`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.


Describe the package and its features in the introduction
Put emphasize on the structure more than the content
Include all the sections most packages would have
A section that would describe the API
A section that would provided examples of how to use the package
Show example for esm and comonjs
Show the instalation for npm, yarn and pnpm...
Under the title in the header include 1 badge from shields.io
If required you can use the [[PLACE HOLDER]] notation.
name the package Mapping Tools (mapping-tools) instead  and use these badges only
I provided a header and footer snipets below
HEADER would look like this please:

# Mapping Tools

![npm type definitions](https://img.shields.io/npm/types/mapping-tools?label=Powered%20by)

FOOTER please end this template with:

### Copyright © 2022 · LUXCIUM · (Benjamin Vincent) · luxcium﹫neb4o1.com

† Scientia est lux principium✨ ™

<sup>Text generated by an [AI language model](https://openai.com/) has been used in this work.</sup>


Arguments
collection: Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>> | PromiseLike<Iterable<Base<T>>>: The collection of items to be iterated or mapped over. The collection can be either an iterable or a combination of an iterable and a promise of an iterable. The Base<T> type represents a resolved or rejected promise, or a value. It can be one of the following:

TBase: The resolved value of a promise.
Settled<TBase>: An object representing a resolved or rejected promise, with a status field indicating the status of the promise and a value or reason field containing the resolved value or rejection reason, respectively.
PromiseSettledResult<TBase>: An object representing a resolved or rejected promise, with a status field indicating the status of the promise and a value or reason field containing the resolved value or rejection reason, respectively.
SettledRight<TBase>: An object representing a resolved promise, with a status field equal to 'fulfilled' and a value field containing the resolved value.
PromiseFulfilledResult<TBase>: An object representing a resolved promise, with a status field equal to 'fulfilled' and a value field containing the resolved value.
SettledLeft: An object representing a rejected promise, with a status field equal to 'rejected' and a reason field containing the rejection reason.
PromiseRejectedResult: An object representing a rejected promise, with a status field equal to 'rejected' and a reason field containing the rejection reason.
callback: (item: T) => U: A callback function that is applied to each item in the collection.

thisArg?: any: An optional value to use as this when executing the callback.

limit?: number: An optional


## Arguments

- `collection: Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>> | PromiseLike<Iterable<Base<T>>>`: The collection of items to be iterated or mapped over. The collection can be either an iterable or a combination of an iterable and a promise of an iterable. The `Base<T>` type represents a resolved or rejected promise, or a value. It can be one of the following:
  - `TBase`: The resolved value of a promise.
  - `Settled<TBase>`: An object representing a resolved or rejected promise, with a `status` field indicating the status of the promise and a `value` or `reason` field containing the resolved value or rejection reason, respectively.
  - `PromiseSettledResult<TBase>`: An object representing a resolved or rejected promise, with a `status` field indicating the status of the promise and a `value` or `reason` field containing the resolved value or rejection reason, respectively.
  - `SettledRight<TBase>`: An object representing a resolved promise, with a `status` field equal to `'fulfilled'` and a `value` field containing the resolved value.
  - `PromiseFulfilledResult<TBase>`: An object representing a resolved promise, with a `status` field equal to `'fulfilled'` and a `value` field containing the resolved value.
  - `SettledLeft`: An object representing a rejected promise, with a `status` field equal to `'rejected'` and a `reason` field containing the rejection reason.
  - `PromiseRejectedResult`: An object representing a rejected promise, with a `status` field equal to `'rejected'` and a `reason` field containing the rejection reason.


- `callback: (item: T) => U`: A callback function that is applied to each item in the collection.


  - **serialMapping**
  - **awaitedMapping**
  - **paralellMapping**
  - **generateMappingAsync**
  - **generateMapping**


  - serialMapping is based on `forOf` _loop_
  - awaitedMapping is based on `Promise.all($)`
  - paralellMapping is based on an `Array.prototype.map($)`
  - generateMappingAsync is based on the `AsyncGenerator` _Protocol_
  - generateMapping is based on the `Generator` _Protocol_


awaitedMapping Returns: `Promise<Array<Settled<R>>>`
paralellMapping Returns: `Array<Promise<Settled<R>>>`
serialMapping Returns: `Promise<Array<Settled<R>>>`
generateMappingAsync Returns: `AsyncGenerator<Settled<R>, void, unknown>`
generateMapping Returns: `Generator<Promise<Settled<R>>, void, unknown>`
